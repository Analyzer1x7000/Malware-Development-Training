/*

 Red Team Operator course code template
 storing payload in .text section
 
 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void) {
    
	void * exec_mem;			// Declaring a void pointer and naming it exec_mem for "executable memory"
	BOOL rv;  					// False by default. 
	HANDLE th; 					// Handle to a file, process, thread etc. Named 'th', probably for "thread". 
    DWORD oldprotect = 0;		// "Double word" -- basically just a positive integer
	
	// 4 byte payload -- each entry is 1 byte
	unsigned char payload[] = {
		0x90,		// NOP
		0x90,		// NOP
		0xcc,		// INT3
		0xc3		// RET
	};
	
	// This is the amount of memory that will be used to store the payload (array) later on in the program
	unsigned int payload_len = 4;
	
	
	// Allocate a memory buffer for payload
	exec_mem = VirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	// 					   (lpAddress, dwSize, [flag] flAllocationType, [flag] flProtect)
	
	printf("%-20s : 0x%-016p\n", "payload addr", (void *)payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	// Copy payload to new buffer
	RtlMoveMemory(exec_mem, payload, payload_len);
	
	// Make the new buffer executable -- so we can execute the payload
	rv = VirtualProtect(exec_mem, payload_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me!\n");
	getchar();

	// If all good, run the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
